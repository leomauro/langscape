# -*- coding: UTF-8 -*-

# flexutils.py is used to support some commands
#

import os
import xmlutils
import sys
from langscape.util.minicommands import MiniCommand

def convert2p4d(langlet, input_file):
    out, ext = input_file.splitext()
    if ext == ".mxml":
        out = out+".p4d"
        swf_name = input_file.splitext()[0].basename()
        f_name   = "".join(input_file.splitext()[0].basename().lower().split("_"))
        p4d_str = langlet.P4D.from_xml(open(input_file).read()).p4dstr(name = "p4ddoc")
        p4d_str = p4d_str.replace("\\", "\\\\")
        f_out = open(out,"w")
        f_out.write("from EasyExtend.util.path import path\n")
        f_out.write("from EasyExtend.langlets.p4d.flexutils import mxcontrol\n")
        f_out.write("import EasyExtend.langlets.p4d.flexutils as flexutils\n\n")
        f_out.write(p4d_str+"\n\n")
        f_out.write("if __name__ == '__main__':\n")
        f_out.write('    flexutils.exec_mxml(p4ddoc, "%s", "%s.swf", path(__file__).dirname())\n'%(f_name, swf_name))
        f_out.close()
    elif ext == ".as":
        out = "run_"+out+".p4d"
        swf_name = "run_"+input_file.splitext()[0].basename()
        f_name   = "run_"+"".join(input_file.splitext()[0].basename().lower().split("_"))
        f_out = open(out,"w")
        f_out.write("from EasyExtend.util.path import path\n")
        f_out.write("import EasyExtend.langlets.p4d.flexutils as flexutils\n\n")
        #f_out.write(p4d_str+"\n\n")
        f_out.write("if __name__ == '__main__':\n")
        f_out.write('    flexutils.exec_mxml(p4ddoc, "%s", "%s.swf", path(__file__).dirname())\n'%(f_name, swf_name))
        f_out.close()
    else:
        raise ValueError("wrong file extension: extension `.mxml` or `.as` required")

directives = set(['Assembly',
                  'Control',
                  'Implements',
                  'Import',
                  'Master',
                  'MasterType',
                  'OutputCache',
                  'Page',
                  'PreviousPageType',
                  'Register',
                  'Reference'])

class aspnprinter(xmlutils.xmlprinter):

    def pprint(self, xml_declaration = False, strip_p4d = False):
        self._indentw = 4

        def indent(txt):
            return " "*self._indentw*level+txt

        def strip_endtag(end_tag):
            if strip_p4d and 'p4d:' in end_tag:
                return end_tag.replace('p4d:', '')
            else:
                return end_tag

        def autoinsert(begin_tag, attrs):
            if begin_tag.startswith("bl:"):
                if "bl" not in autoinserted:
                    attrs["xmlns:bl"] = "http://fiber-space.de/blns"
                    autoinserted.add("bl")
            elif begin_tag.startswith("bl-schema:"):
                if "bl-schema" not in autoinserted:
                    attrs["xmlns:bl-schema"] = "http://fiber-space.de/bl-schemans"
                    autoinserted.add("bl-schema")

        def handle_begintag(begin_tag, has_p4d_ns, multiline):
            if begin_tag == "_T":
                begin_tag = ""
                endtags.append("")
            elif begin_tag == "*":
                begin_tag = "%"
                if multiline:
                    endtags.append('\n'+indent("%>\n"))
                else:
                    endtags.append("%>\n")
            elif begin_tag == "**":
                begin_tag = "![CDATA["
                if multiline:
                    endtags.append('\n'+indent("]]>\n"))
                else:
                    endtags.append("]]>\n")
            elif begin_tag in directives:
                begin_tag = "%@ "+begin_tag
                if multiline:
                    endtags.append('\n'+indent("%>\n"))
                else:
                    endtags.append("%>\n")
            else:
                endtags.append(indent("</%s>\n"%begin_tag))
            if begin_tag.startswith("p4d:"):
                if strip_p4d:
                    begin_tag = begin_tag[4:]
                    prefixed.add(begin_tag)
                elif not has_p4d_ns:
                    attrs["xmlns:p4d"] = "http://fiber-space.de/p4dns"
                    has_p4d_ns = True
            else:
               autoinsert(begin_tag, attrs)
            return begin_tag, has_p4d_ns

        if xml_declaration:
            self.stream.write('<?xml version="1.0" encoding="UTF-8" ?> \n')
        walker  = self.walker()
        endtags = []
        prefixed = set()
        autoinserted = set()
        level   = 0
        has_p4d_ns = False
        while 1:
            try:
                element,level = walker.next()
                begin_tag, attrs, children, text = element
                text = str(text)
                n = text.count('\n')
                k = n
                if n:
                    text = text.rstrip()
                    k = n - text.count('\n')
                    if k>0:
                        text+='\n'*(k-1)
                while level<len(endtags):
                    end_tag = strip_endtag(endtags.pop())
                    self.stream.write(end_tag)
                s_element = "\n\n"
                begin_tag, has_p4d_ns = handle_begintag(begin_tag, has_p4d_ns, k)
                if begin_tag == "":
                    _t = text
                    if _t:
                        self.stream.write(indent(_t+"\n"))
                    endtags.pop()
                    continue
                s_attrs = self.formatAttributes(attrs, strip_p4d, prefixed)
                if children == [] and text == '':
                    if begin_tag[0] == "%":
                        s_element = indent("<%s%s %%>\n"%(begin_tag,s_attrs))
                    else:
                        s_element = indent("<%s%s/>\n"%(begin_tag,s_attrs))
                    endtags.pop()
                elif children == [] and text:
                    begin_tag, s_attrs, text = self.filter(begin_tag, s_attrs, text, **{"level":level})
                    end_tag = strip_endtag(endtags.pop())
                    if begin_tag[0] == "!":
                        s_element = indent("<%s%s%s%s"%(begin_tag,s_attrs,text,end_tag))
                    else:
                        if k == 0:
                            end_tag = end_tag.lstrip()
                        if begin_tag == "%":
                            s_element = indent("<%s%s%s%s"%(begin_tag,s_attrs,text,end_tag))
                        else:
                            s_element = indent("<%s%s>%s%s"%(begin_tag,s_attrs,text,end_tag))
                elif text:
                    args = self.filter(begin_tag, s_attrs, text, **{"level":level})
                    if begin_tag == "%":
                        s_element = indent("<%s%s%s\n"%args)
                    else:
                        s_element = indent("<%s%s>%s\n"%args)
                else:
                    begin_tag, s_attrs, text = self.filter(begin_tag, s_attrs, text, **{"level":level})
                    s_element = indent("<%s%s>\n"%(begin_tag,s_attrs))
                self.stream.write(s_element)
            except StopIteration:
                while len(endtags):
                    self.stream.write(strip_endtag(endtags.pop()))
                if prefixed:
                    print "xmlutils.py: Following tags were stripped from `p4d` prefix: %s"%(list(prefixed),)
                break

def aspn_str(element):
    tag_name = element.tag
    aspn_str = "<!--  %s.aspx  -->\n"%tag_name
    aspn_str+= '\n'.join([child.xmlstr(xml_declaration = False, xmlprinter = aspnprinter).strip() for child in element])
    aspn_str+= "\n"
    print aspn_str
    return aspn_str

def aspn_file(element):
    _aspn_str = aspn_str(element)
    first_child = element.first_child().tag
    if first_child == "Page":
        open(element.tag+".aspx", "w").write(_aspn_str)
    elif first_child == "Control":
        open(element.tag+".ascx", "w").write(_aspn_str)


elm First:
    Page(Language="VB" Debug = "True" Strict = "True")
    script(runat = "server"):
        """
        Dim tmp As String = "Hallo, Welt!"
        """
    html:
        head:
            title:
               {* = tmp *}
        body:
            {* = tmp *}
        p4d:def:out:
            bar
elm First:
    Page(Language="IronPython" Debug = "True" Strict = "True")
    script(runat = "server"): 'tmp = "Hello, world!"'
    html:
        head:
            title:
               {* = tmp *}
        body:
            {* = tmp *}


aspn_file(First)
