def build_cstbuilder(cstbuilder):
    and_expr         = cstbuilder.builder(1056, 'and_expr', "and_expr: shift_expr ('&' shift_expr)*")
    and_test         = cstbuilder.builder(1050, 'and_test', "and_test: not_test ('and' not_test)*")
    arglist          = cstbuilder.builder(1075, 'arglist', "arglist: ( argument ',')* ( argument [','] | '*' test (',' argument)* [',' '**' test] | '**' test)")
    argument         = cstbuilder.builder(1076, 'argument', "argument: test [comp_for] | test '=' test")
    arith_expr       = cstbuilder.builder(1058, 'arith_expr', "arith_expr: term (('+' | '-') term)*")
    assert_stmt      = cstbuilder.builder(1035, 'assert_stmt', "assert_stmt: 'assert' test [',' test]")
    atom             = cstbuilder.builder(1062, 'atom', "atom: ('(' [yield_expr | testlist_comp] ')' | '[' [listmaker] ']' | '{' [dictorsetmaker] '}' | '`' testlist1 '`' | NAME | NUMBER | STRING+)")
    augassign        = cstbuilder.builder(1015, 'augassign', "augassign: ('+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '**=' | '//=')")
    break_stmt       = cstbuilder.builder(1020, 'break_stmt', "break_stmt: 'break'")
    classdef         = cstbuilder.builder(1074, 'classdef', "classdef: 'class' NAME ['(' [testlist] ')'] ':' suite")
    comp_for         = cstbuilder.builder(1081, 'comp_for', "comp_for: 'for' exprlist 'in' or_test [comp_iter]")
    comp_if          = cstbuilder.builder(1082, 'comp_if', "comp_if: 'if' old_test [comp_iter]")
    comp_iter        = cstbuilder.builder(1080, 'comp_iter', "comp_iter: comp_for | comp_if")
    comp_op          = cstbuilder.builder(1053, 'comp_op', "comp_op: '<' | '>' | '==' | '>=' | '<=' | '<>' | '!=' | 'in' | 'not' 'in' | 'is' | 'is' 'not'")
    comparison       = cstbuilder.builder(1052, 'comparison', "comparison: expr ( comp_op expr)*")
    compound_stmt    = cstbuilder.builder(1036, 'compound_stmt', "compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated")
    continue_stmt    = cstbuilder.builder(1021, 'continue_stmt', "continue_stmt: 'continue'")
    decorated        = cstbuilder.builder(1005, 'decorated', "decorated: decorators ( classdef | funcdef)")
    decorator        = cstbuilder.builder(1003, 'decorator', "decorator: '@' dotted_name ['(' [arglist] ')'] NEWLINE")
    decorators       = cstbuilder.builder(1004, 'decorators', "decorators: decorator+")
    del_stmt         = cstbuilder.builder(1017, 'del_stmt', "del_stmt: 'del' exprlist")
    dictmaker        = cstbuilder.builder(1072, 'dictmaker', "dictmaker: test ':' test (',' test ':' test)* [',']")
    dictorsetmaker   = cstbuilder.builder(1073, 'dictorsetmaker', "dictorsetmaker: (( test ':' test ( comp_for | (',' test ':' test)* [','])) | ( test ( comp_for | (',' test)* [','])))")
    dotted_as_name   = cstbuilder.builder(1029, 'dotted_as_name', "dotted_as_name: dotted_name ['as' NAME]")
    dotted_as_names  = cstbuilder.builder(1031, 'dotted_as_names', "dotted_as_names: dotted_as_name (',' dotted_as_name)*")
    dotted_name      = cstbuilder.builder(1032, 'dotted_name', "dotted_name: NAME ('.' NAME)*")
    encoding_decl    = cstbuilder.builder(1084, 'encoding_decl', "encoding_decl: NAME")
    eval_input       = cstbuilder.builder(1002, 'eval_input', "eval_input: testlist NEWLINE* ENDMARKER")
    except_clause    = cstbuilder.builder(1043, 'except_clause', "except_clause: 'except' [test [('as' | ',') test]]")
    exec_stmt        = cstbuilder.builder(1034, 'exec_stmt', "exec_stmt: 'exec' expr ['in' test [',' test]]")
    expr             = cstbuilder.builder(1054, 'expr', "expr: xor_expr ('|' xor_expr)*")
    expr_stmt        = cstbuilder.builder(1014, 'expr_stmt', "expr_stmt: testlist ( augassign ( yield_expr | testlist) | ('=' ( yield_expr | testlist))*)")
    exprlist         = cstbuilder.builder(1070, 'exprlist', "exprlist: expr (',' expr)* [',']")
    factor           = cstbuilder.builder(1060, 'factor', "factor: ('+' | '-' | '~') factor | power")
    file_input       = cstbuilder.builder(1001, 'file_input', "file_input: ( NEWLINE | stmt)* ENDMARKER")
    flow_stmt        = cstbuilder.builder(1019, 'flow_stmt', "flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt")
    for_stmt         = cstbuilder.builder(1039, 'for_stmt', "for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite]")
    fpdef            = cstbuilder.builder(1009, 'fpdef', "fpdef: NAME | '(' fplist ')'")
    fplist           = cstbuilder.builder(1010, 'fplist', "fplist: fpdef (',' fpdef)* [',']")
    funcdef          = cstbuilder.builder(1006, 'funcdef', "funcdef: 'def' NAME parameters ':' suite")
    global_stmt      = cstbuilder.builder(1033, 'global_stmt', "global_stmt: 'global' NAME (',' NAME)*")
    if_stmt          = cstbuilder.builder(1037, 'if_stmt', "if_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite]")
    import_as_name   = cstbuilder.builder(1028, 'import_as_name', "import_as_name: NAME ['as' NAME]")
    import_as_names  = cstbuilder.builder(1030, 'import_as_names', "import_as_names: import_as_name (',' import_as_name)* [',']")
    import_from      = cstbuilder.builder(1027, 'import_from', "import_from: ('from' ('.'* dotted_name | '.'+) 'import' ('*' | '(' import_as_names ')' | import_as_names))")
    import_name      = cstbuilder.builder(1026, 'import_name', "import_name: 'import' dotted_as_names")
    import_stmt      = cstbuilder.builder(1025, 'import_stmt', "import_stmt: import_name | import_from")
    lambdef          = cstbuilder.builder(1065, 'lambdef', "lambdef: 'lambda' [varargslist] ':' test")
    list_for         = cstbuilder.builder(1078, 'list_for', "list_for: 'for' exprlist 'in' testlist_safe [list_iter]")
    list_if          = cstbuilder.builder(1079, 'list_if', "list_if: 'if' old_test [list_iter]")
    list_iter        = cstbuilder.builder(1077, 'list_iter', "list_iter: list_for | list_if")
    listmaker        = cstbuilder.builder(1063, 'listmaker', "listmaker: test ( list_for | (',' test)* [','])")
    not_test         = cstbuilder.builder(1051, 'not_test', "not_test: 'not' not_test | comparison")
    old_lambdef      = cstbuilder.builder(1047, 'old_lambdef', "old_lambdef: 'lambda' [varargslist] ':' old_test")
    old_test         = cstbuilder.builder(1046, 'old_test', "old_test: or_test | old_lambdef")
    or_test          = cstbuilder.builder(1049, 'or_test', "or_test: and_test ('or' and_test)*")
    parameters       = cstbuilder.builder(1007, 'parameters', "parameters: '(' [varargslist] ')'")
    pass_stmt        = cstbuilder.builder(1018, 'pass_stmt', "pass_stmt: 'pass'")
    power            = cstbuilder.builder(1061, 'power', "power: atom trailer* ['**' factor]")
    print_stmt       = cstbuilder.builder(1016, 'print_stmt', "print_stmt: 'print' ([test (',' test)* [',']] | '>>' test [(',' test)+ [',']])")
    raise_stmt       = cstbuilder.builder(1024, 'raise_stmt', "raise_stmt: 'raise' [test [',' test [',' test]]]")
    return_stmt      = cstbuilder.builder(1022, 'return_stmt', "return_stmt: 'return' [testlist]")
    shift_expr       = cstbuilder.builder(1057, 'shift_expr', "shift_expr: arith_expr (('<<' | '>>') arith_expr)*")
    simple_stmt      = cstbuilder.builder(1012, 'simple_stmt', "simple_stmt: small_stmt (';' small_stmt)* [';'] NEWLINE")
    single_input     = cstbuilder.builder(1000, 'single_input', "single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE")
    sliceop          = cstbuilder.builder(1069, 'sliceop', "sliceop: ':' [test]")
    small_stmt       = cstbuilder.builder(1013, 'small_stmt', "small_stmt: ( expr_stmt | print_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | exec_stmt | assert_stmt)")
    stmt             = cstbuilder.builder(1011, 'stmt', "stmt: simple_stmt | compound_stmt")
    subscript        = cstbuilder.builder(1068, 'subscript', "subscript: '.' '.' '.' | test | [test] ':' [test] [sliceop]")
    subscriptlist    = cstbuilder.builder(1067, 'subscriptlist', "subscriptlist: subscript (',' subscript)* [',']")
    suite            = cstbuilder.builder(1044, 'suite', "suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT")
    term             = cstbuilder.builder(1059, 'term', "term: factor (('*' | '/' | '%' | '//') factor)*")
    test             = cstbuilder.builder(1048, 'test', "test: or_test ['if' or_test 'else' test] | lambdef")
    testlist         = cstbuilder.builder(1071, 'testlist', "testlist: test (',' test)* [',']")
    testlist1        = cstbuilder.builder(1083, 'testlist1', "testlist1: test (',' test)*")
    testlist_comp    = cstbuilder.builder(1064, 'testlist_comp', "testlist_comp: test ( comp_for | (',' test)* [','])")
    testlist_safe    = cstbuilder.builder(1045, 'testlist_safe', "testlist_safe: old_test [(',' old_test)+ [',']]")
    trailer          = cstbuilder.builder(1066, 'trailer', "trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME")
    try_stmt         = cstbuilder.builder(1040, 'try_stmt', "try_stmt: ('try' ':' suite (( except_clause ':' suite)+ ['else' ':' suite] ['finally' ':' suite] | 'finally' ':' suite))")
    varargslist      = cstbuilder.builder(1008, 'varargslist', "varargslist: (( fpdef ['=' test] ',')* ('*' NAME [',' '**' NAME] | '**' NAME) | fpdef ['=' test] (',' fpdef ['=' test])* [','])")
    while_stmt       = cstbuilder.builder(1038, 'while_stmt', "while_stmt: 'while' test ':' suite ['else' ':' suite]")
    with_item        = cstbuilder.builder(1042, 'with_item', "with_item: test ['as' expr]")
    with_stmt        = cstbuilder.builder(1041, 'with_stmt', "with_stmt: 'with' with_item (',' with_item)* ':' suite")
    xor_expr         = cstbuilder.builder(1055, 'xor_expr', "xor_expr: and_expr ('^' and_expr)*")
    yield_expr       = cstbuilder.builder(1085, 'yield_expr', "yield_expr: 'yield' [testlist]")
    yield_stmt       = cstbuilder.builder(1023, 'yield_stmt', "yield_stmt: yield_expr")
    return locals()

